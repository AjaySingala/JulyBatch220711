W1: RDBMS: MySQL
W2: Python
W3: Scala / AWS
W4: Spark / SparkSQL - Project starts (Scala Spark)
W5: DataWarehousing, Apache Airflow, AWS EMR...
W6: Project - Presentation on Thursday.

Mondays: 1:1s with trainer
Tue/Wed: QC

Portfolios: 

Mock Interview
Client Intervention

Practice coding exercises.

Big Data VM (Hortonworks HDP 2.6.5 VM) - Spark, SparkSQL
MySQL (locally)
Python (locally)
Scala (locally or the VM) - sbt
Spark/SparkSQL (the VM)
VS Code (for Python and Scala coding).




MySQL:
RDBMS:
RDBMS vs DBMS:
DBMS the schema (tables) cannot be "related" to each other.
	We cannot create dependencies.
RDBMS: We can create relations and have dependencies by creating Primary Keys (PK) and Forgeign Keys (FK)

PK: unique values,  
RDBMS have a provision to auto-generate the PK value (if it is an integer).
FK: Is used to relate data in one table with another table based on the PK of the other table.
FK: Is a column in a table that references the PK of another table.
FK: there can be multiple FKs in a single table.

customer places an order for an product.
In RDBMS, it is always better to have a PK in ALL TABLES.

Indexes:
SELECT * FROM Customers
WHERE CustomerId = 101

SELECT * FROM Customers
WHERE Firstname = 'John'

Keren, Hyung: #1
Kaya: no diff. Same time for both.

When you create a PK on a table, it will automatically create an INDEX on that column for table.

You can also create indexes of your own.

SELECT * FROM Customers
WHERE EmailId = 'ajay.singala@revature.com'

SQL: Structured Query Language
DML - Data Manipulation Language.
	INSERT, UPDATE, DELETE
DDL - Data Definition Language.
	TRUNCATE, DROP, CREATE, ALTER
DQL - Data Query Language.
	SELECT
DCL - Data Control Language.
	GRANT, REVOKE
TCL - Transaction Control Language.
	ROLLBACK, COMMIT
	
	
	BEGIN TRANSACTION
		INSERT ...
		INSERT ...
		UPDATE ...
		
		IF SUCCESS THEN
			COMMIT
		ELSE
			ROLLBACK
	END

DELETE FROM Customers is same as TRUNCATE TABLE customers


Exercise:
Schema for a typical bank.
what tables?
columns in the table?
PK and FK relationships as well.

CREATE TABLE Customers (
   Id INT NOT NULL AUTO_INCREMENT,
   Fname VARCHAR(50),
   Lname VARCHAR(50),
   Primary Key (Id)
);
   
CREATE TABLE Orders (
	OrderId INT NOT NULL AUTO_INCREMENT,
	OrderDate DATETIME NOT NULL,
	CustomerId INT NOT NULL,
	Primary Key (OrderId),
	FOREIGN KEY (CustomerId) REFERENCES Customers(Id)
);

SELECT ....
FROM Orders o
JOIN Customers c on c.ID = o.customerId 

Referential Integrity
	Ensuring data integrity by not allowing to create records in FK columns that do not exist in PK.
	Trying to delete a PK that has FK references in other tables with data existing produces an error.
	CASCADE DELETES
	
Data Types:
String Data Types:
VARCHAR(size): Variable length string. from 0 to 65535. Can have alphabets, numbers, special chars (! # % ^...)
	VARCHAR(50), VARCHAR(100)
CHAR(size): Fixed length string. 0 - 255. Default size is 1.
ENUM(val1, val2, val3...): Any one of the givne values. Max 65535 values.
	AccountType ENUM('Savings', 'Checking', 'Loan')
SET(val1, val2, val3...): 0 or more values of the given values. Max of 64 values.

Numeric Data Types:
INT / INTEGER: -2147483648 to 2147483647
BOOL / BOOLEAN: 0 is FALSE. Any non-zero number is TRUE.
FLOAT(size, decimals):
DOUBLE(size, decimals):
DECIMAL(size, decimals):

Date and Time Data Types:
DATE: YYYY-MM-DD. '1000-01-01' to '9999-12-31'
DATETIME: YYYY-MM-DD hh:mm:ss. '1000-01-01 00:00:00' to '9999-12-31 23:59:59'
TIME: hh:mm:ss
YEAR: 1000 - 9999. For e.g.; 2022.
TIMESTAMP: For e.g.; '2022-07-11 13:00:00 UTC'
	Usually used for audit logs.
	
BLOB: Binary Large Objects. Max size is 65535 bytes of data.
LONGBLOB: for larger binary objects.

DML and DQL:
CRUD Operations:
CREATE RETRIEVE UPDATE DELETE - CRUD.

INSERT
INSERT INTO <tablename> (col1, col2, col3,...coln) VALUES (val1, val2, val3,...valn)

INSERT INTO Customers (Id, Fname, LName, State, City) VALUES (101, 'John', 'Smith', 'MA', 'Boston')

If "Id" was the PK and marked as AUTO_INCREMENT, do not specify the value for it.
INSERT INTO Customers (Fname, LName, State, City) VALUES ('John', 'Smith', 'MA', 'Boston')

INSERT INTO Customers () VALUES ('John', 'Smith', 'MA', 'Boston')

INSERT INTO Customers () VALUES ('Boston', 'John', 'Smith', 'MA')

SELECT:
SELECT col1, col2, col3,...coln
FROM tablename
WHERE cond1
AND cond2
AND cond3
OR cond4

SELECT ....
FROM table1
JOIN table2 ON join_criteria

SELECT o.OrderId, o.OrderDate, o.CustomerId, c.Fname, c.Lastname, c.City
FROM Orders o
JOIN Customers c ON o.CustomerId = o.CustomerId


UPDATE:
UPDATE tablename
SET col1 = val1, col2 = val2, coln = valn .....
WHERE cond1

UPDATE Customers
SET Status = 'Inactive'
WHERE Status IS NULL


DELETE:
DELETE FROM tablename
WHERE cond1

DELETE FROM Customers
WHERE Firstname IS NULL
AND Lastname IS NULL


DDL:
CREATE: create tables, indexes, views, stored procedures, functions, databases.
CREATE TABLE tablename (
	col1 datatype [constraint],
	col2 datatype [constraint],
	col3 datatype [constraint],
	:
	:
	coln datatype [constraint],
	PRIMARY KEY(col),
	FOREIGN KEY(col) REFERENCES pk_table(pk_col)
)

CREATE TABLE Customers (
   Id INT NOT NULL AUTO_INCREMENT,
   Fname VARCHAR(50),
   Lname VARCHAR(50),
   Primary Key (Id)
);
   
CREATE TABLE Orders (
	OrderId INT NOT NULL AUTO_INCREMENT,
	OrderDate DATETIME NOT NULL,
	CustomerId INT NOT NULL,
	Primary Key (OrderId),
	FOREIGN KEY (CustomerId) REFERENCES Customers(Id)
);

ALTER:
ALTER TABLE tablename
ADD colname datatype;

ALTER TABLE tablename
DROP COLUMN colname;

ALTER TABLE tablename
MODIFY COLUMN colname new_data_type;

TRUNCATE: Delete ALL rows in the table, but not the table itself.
TRUNCATE TABLE tablename;

DROP: tables, views, indexes...
DROP TABLE: Delete the table and all data in the table.
DROP TABLE tablename;


IF EXISTS tablename THEN DROP tablename
IF NOT EXISTS tablename THEN 
CREATE TABLE tablename (...)


SELECT statement:
=================
SELECT * FROM Customers

SELECT Id, Firstname, Lastname
FROM Customers

SELECT Id, Firstname, Lastname
FROM Customers
WHERE City = 'Boston'

SELECT Id, Firstname, Lastname
FROM Customers
WHERE City = 'Boston'
AND Status = 'Inactive'

SELECT Id, Firstname, Lastname
FROM Customers
WHERE City = 'Boston'
OR City = 'Dallas'

SELECT Id, Firstname, Lastname
FROM Customers
WHERE (City = 'Boston'
OR City = 'Dallas')
AND Status = 'Inactive'

AND takes precedence over OR

SELECT Id, Firstname, Lastname
FROM Customers
WHERE (City = 'Boston' AND Status = 'Inactive')
OR (City = 'Dallas' AND Status = 'Active')

Unexpected results if () not provided in the right places:
SELECT Id, Firstname, Lastname
FROM Customers
WHERE City = 'Boston' AND Status = 'Inactive'
OR City = 'Dallas' AND Status = 'Active'

SELECT * FROM  Customers
WHERE Status IS NULL

Wildcard: LIKE:
SELECT * FROM  Customers
WHERE Firstname LIKE 'A%'

SELECT * FROM  Customers
WHERE Firstname LIKE '%a'

SELECT * FROM  Customers
WHERE Firstname LIKE '%ar%'


BETWEEN-AND:
SELECT * FROM  Orders
WHERE OrderDate BETWEEN '2022-01-01' AND '2022-03-31'

SELECT * FROM  Orders
WHERE OrderDate NOT BETWEEN '2022-01-01' AND '2022-03-31'

Use https://www.w3schools.com/sql/trysql.asp?filename=trysql_asc
Create a SQL statement that shows the following data:
CustomerId, CustomerName, City, Country, OrderId, OrderDate, ProductId, ProductName, Quantity, Price, TotalAmount, ShipperId, ShipperName


ROLLBACK & COMMIT

CONSTRAINTS: specified when creating tables.
NULL
NOT NULL
PRIMARY KEY
FOREIGN KEY
UNIQUE
DEFAULT
CHECK: to check if the column contains specific values.
INDEX

Multiplicity: Relation between tables. 
=============
1:1 - 1 Employee belongs to 1 deparment.
1:* - 1 Customer, many orders.
*:1 - 1 Department can have many employees.
*:* - There can be many orders for many products - You must store this in a separate table. For e.g.; OrderDetails.

Views:
======
What is a View?
It is NOT a table. It is like a table.
It exists physically as an object in the DB.
A view is usually created to replace writing complex queries again and again.
Execute SELECT statements on a View just like you would on a table.
	SELECT, WHERE, ORDER BY, GROUP BY, HAVING...all can be applied on a View.

CREATE VIEW CustomerOrdersView
AS
	SELECT 
		c.CustomerID, c.CustomerName, c.City, c.Country, 
		o.OrderID, o.OrderDate, 
		p.ProductID, p.ProductName, 
		od.Quantity, p.Price, od.Quantity*p.Price AS TotalAmount, 
		s.ShipperID, s.ShipperName 
	FROM Customers c
	JOIN Orders o ON o.CustomerID = c.CustomerID
	JOIN Shippers s ON s.ShipperID = o.ShipperID
	JOIN OrderDetails od ON od.OrderID = o.OrderID
	JOIN Products p ON p.ProductID = od.ProductID;

SELECT * FROM CustomerOrdersView;

SELECT CustomerId, OrderId, OrderDate 
FROM CustomerOrdersView
WHERE city = 'Dallas'
ORDER BY OrderDate 
;


Interview Qs:
-------------
How to create a table with distinct values?
How to delete duplicate values?

Referential Integrity Constraint (Foreign Key Constraint):
- Insert constraint: Value cannot be inserted in a CHILD table if the value does not exist in the MASTER (PARENT) table.
- Delete Constraint: Value cannot be deleted from the MASTER table if the value exists in the CHILD table.
- On Delete Cascade: If you delete the value in the MASTER table, it will also delete the value(s) in the CHILD table.
	Not preferred!!!
	
CREATE TABLE Orders (
	OrderId INT NOT NULL AUTO_INCREMENT,
	CustomerId INT,
	col2...,
	col3...,
	
	PRIMARY KEY (OrderId),
	FOREIGN KEY (customerid) REFERENCES Customers(CustomerId) ON DELETE CASCADE
);

NEVER EVER DELETE RECORDS PHYSICALLY FROM A TABLE!!!
NEVER USE THE "DELETE" STATEMENT EVER!!!

Instead of deleting, archive it to a different DB.
Employees
Departments
MonthlySalaries
48 records for my salaries - could be spread across multiple tables.
Tax related data


SELECT * 
FROM Employees e
JOIN 
JOIN
WHERE e.IsActive = 'Y'

Banking application
I become a customer and get CustomerId
I open 2 Checking Accounts, which means I have 2 Account Numbers
I perform several transactions over 2-3 years.

Then I decide to switch banks and open an account with another bank.
AUDIT PURPOSES!!! LEGAL!!!


GROUP BY and HAVING clauses:
============================
GROUP BY is mainly used when you want perform aggregations: SUM, COUNT, MAX, MIN, AVG.

SELECT od.ProductID, SUM(Quantity)
FROM OrderDetails od
GROUP BY od.ProductId

SELECT od.ProductID, MAX(Quantity)
FROM OrderDetails od
GROUP BY od.ProductId

When using GROUP BY, you can only specify columns in the SELECT statement that are part of the GROUP BY clause and any aggregations.
You cannot specify any other column in the SELECT statement.

HAVING:
is very similar to the WHERE clause, meaning it is used to filter records.

SELECT ....
FROM T1
WHERE cond1
GROUP BY col1
HAVING cond2

SELECT 
	od.ProductID, 
    p.ProductName,
    SUM(Quantity) AS TotalQuantity
FROM OrderDetails od
JOIN Products p ON od.ProductId = p.ProductId
WHERE Quantity > 10
GROUP BY od.ProductId
HAVING TotalQuantity > 30
;

WHERE is executed / evaluated before GROUP BY.
HAVING is evaluated after GROUP BY.

How much/many of each Product was sold for each City.

WHERE - LIKE clause using Wildcard characters:
SELECT *
FROM Customers
WHERE Firstname LIKE 'a%'

%: represents 0 or more characters.
_: represents one and only one (single) character.

WHERE Firstname LIKE 'a%': find any values that start with 'a'.
WHERE Firstname LIKE '%a': find any values that end with 'a'.
WHERE Firstname LIKE '%or%': find any values that have 'or' in any position.
WHERE Firstname LIKE '_a%': Find any values that have a "a" in the second position.
WHERE Firstname LIKE 'a_%': Find any values that start with "a" followed by at least one more character and then there may or may not be more chars. The value has to be at least 2 characters long.
WHERE Firstname LIKE 'a__%': Find any values that start with "a" and are atleast 3 characters long. 
WHERE Firstname LIKE 'a%e': Find any values that start with "a" and end with "e".
 
IN Operator.
SELECT * FROM [Customers]
WHERE City IN ('Berlin', 'London', 'Madrid')

SELECT * FROM [Customers]
WHERE City NOT IN ('Berlin', 'London', 'Madrid')

Find Customers that are in the same city as Suppliers.
Using sub-query:

SELECT * FROM [Customers]
WHERE City IN (
	SELECT DISTINCT City FROM Suppliers
)

Gets converted into something like this:
SELECT * FROM [Customers]
WHERE City IN ('Ann Arbor', 'Annecy', 'Bend', 'Berlin', .....)


Find Order that had the highest quantity ordered for any product:
SELECT od.OrderId, p.ProductId, p.ProductName, od.Quantity 
FROM [OrderDetails] od
JOIN Products p ON od.ProductId = p.ProductId
WHERE Quantity = (
	SELECT MAX(Quantity) FROM OrderDetails
)


Find the customer who placed the Order that had the highest quantity ordered for any product:
SELECT od.OrderId, p.ProductId, p.ProductName, od.Quantity
	, c.CustomerId, c.CustomerName, c.City
FROM [OrderDetails] od
JOIN Products p ON od.ProductId = p.ProductId
JOIN Orders o ON od.OrderId = o.OrderId
JOIN Customers c ON o.CustomerId = c.CustomerId
WHERE Quantity = (
	SELECT MAX(Quantity) FROM OrderDetails
)
ORDER BY Quantity 

Find all orders that had product quantity that was more than the average of all ordered items:
SELECT od.OrderId, p.ProductId, p.ProductName, od.Quantity
	-- , c.CustomerId, c.CustomerName, c.City
FROM [OrderDetails] od
JOIN Products p ON od.ProductId = p.ProductId
JOIN Orders o ON od.OrderId = o.OrderId
JOIN Customers c ON o.CustomerId = c.CustomerId
WHERE Quantity > (
	SELECT AVG(Quantity) FROM OrderDetails
)
ORDER BY Quantity 

Same query, using ROUND():
SELECT od.OrderId, p.ProductId, p.ProductName, od.Quantity
	-- , c.CustomerId, c.CustomerName, c.City
FROM [OrderDetails] od
JOIN Products p ON od.ProductId = p.ProductId
JOIN Orders o ON od.OrderId = o.OrderId
JOIN Customers c ON o.CustomerId = c.CustomerId
WHERE Quantity > (
	SELECT ROUND(AVG(Quantity),0) FROM OrderDetails
)
ORDER BY Quantity 


Created a table in a DB, what are the different ways in which this table can be updated/inserted?
1. Directly go to the DB tool (Workbench) and execute INSERT statement.
2. Through an application code.

If I do not have constraints, and I insert records from an application that does not perform any validations on the data, I will get "bad data".

If I DO HAVE constraints, and I insert records from an applicatipon that does not perform any validations on the data, the DB itself will check the validity of the data and the rows will be created ONLY if the constraints are met / passed.

Applications must have additional validations to ensure proper data is sent to the DB.

13-July-2022:
JOINS:
(INNER) JOIN: Returns records that have matching values in both tables.
LEFT (OUTER) JOIN: Returns all records from the left table, and only the matched records from the right table.
RIGHT (OUTER) JOIN: Returns all records from the right table, and only matched records from the left table.
FULL (OUTER) JOIN: Returns all records when there is a match either in the left or right table.

Purpose of "WHERE"?: Filtering, meaning conditions. Returns rows that fulfil a "condition" or a "criteria".
Purpose of "JOIN" is to join tables and not filter data using validation criteria.

LEFT OUTER JOIN Example:
SELECT c.CustomerId, c.CustomerName, o.CustomerId AS 'OrderCustomerId', o.OrderId, o.OrderDate
FROM Customers c
LEFT JOIN Orders o ON c.CustomerId = o.CustomerId

RIGHT OUTER JOIN Example:
SELECT od.OrderId, od.ProductId AS 'OD_ProductID', p.ProductId, p.ProductName
FROM OrderDetails od 
RIGHT JOIN Products p ON od.ProductId = p.ProductId;

FULL OUTER JOIN Example:
SELECT od.OrderId, od.ProductId AS 'OD_ProductID', p.ProductId, p.ProductName
FROM OrderDetails od 
FULL OUTER JOIN Products p ON od.ProductId = p.ProductId;

You can add WHERE conditions to any of the JOINs.

Set Operators:
UNION: Combine rows from both queries.
INTERSECT: Return only those rows that are common to both queries.
EXCEPT: Returns rows from the Left query that are not included in the right query.

UNION:
SELECT c.CustomerId, c.CustomerName, c.City
FROM Customers c
UNION
SELECT s.SupplierId, s.SupplierName, s.City
FROM Suppliers s

Return rows from both queries.
Displays the "headers" from the first query.
No. of columns returned in both queries have to be same.

BUT....In Enterprise DB products (like MS SQL Server, Oracle etc.),
Even the data types of the columns should match.
You can have a UNION of 2 or more queries.
Queries could be on VIEWs.

INTERSECT:
SELECT c.CustomerId
FROM Customers c
INTERSECT
SELECT s.SupplierId
FROM Suppliers s

EXCEPT:
SELECT c.CustomerId
FROM Customers c
EXCEPT
SELECT s.SupplierId
FROM Suppliers s

UNION ALL vs UNION:
UNION displays unique rows from the queries.
UNION ALL displays duplicates from the queries (but not supported by all databases).

Salaries when calculated every month, the system creates separate tables for each month+year.
Jan2022Salary
Feb2022Salary
Mar2022Salary

Normalization:
It is the process of reducing redundancy of data in the tables.
It also helps in improving the data integrity.
The proper configuration or setting of relations (PK-FK) plays a major role in achieving Normalization.

Some issues that can come up when designing DBs:
Insertion anomaly: Occurs when we cannot insert data without the presence of another attribute.
Update anomaly: It results from data redundancy and partial update of data.
Deletion anomaly: Occurs when certain attributes arelost because of the deletion of other atrributes.

Normal Forms (NFs).
1NF: A column in a table should not have multiple values.
For e.g.;
Phonenumber: If more than one phone number is stored in the column, you are breaking the rule for 1NF.
Data types of column values should be same.
By splitting the values into multiple rows to achieve 1NF, we end up with Redundant Data!!!

2NF:
1. The table must already be in 1NF, all non-key columns must depend on the PK of the table.
2. Partial dependencies must be removed and placed in a separate table.

3NF:
1. Table must already be in 2NF.
2. Non-PK columns should not depend on other non-PK columns.
3. There is no transitive functional dependency.

What is "transitive functional dependency"?
When a non-key column when changed, might cause changes to other non-key columns.

Exercise:
Create a database with tables, PK-FK relations, constraints wherever applicable for a MOVIE database.
Tasks in Workbench:
	- CREATE DATABASE script.
	- CREATE TABLE scripts.
	- INSERT data in all the tables.
	- SELECT statements to query movie information.
	- At least one aggregation (GROUP BY).

Setting a custom start value for AUTO_INCREMENT:
------------------------------------------------
use ecommerce;

create table test1 (
	id int not null auto_increment,
    name varchar(10),
    primary key(id)
);

alter table test1
auto_increment = 1001;

insert into test1 (name) values ('abcd');
insert into test1 (name) values ('xyz');

select * from test1;

DRY: Don't Repeat Yourself.
	do not duplicate your work. Reuse.
	reduce redundancy.
KISS: Keept it Simple, Silly!

