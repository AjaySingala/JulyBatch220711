Scala:
======
Scala is an OO language.
	Classes, inheritance, polymorphism etc.
Scala is functional:
	Functional Programming
		using functions as a building block.
		assign funcs to variables and also pass funcs as arguments to other funcs.
		treats functions as 1st class citizens.
		Pure Functions:
			- func has no "side effects":
				- func does not interact with data outside the func.
				- func does not change / modify any data that is outside the func.
			- It always returns the same value for the same inputs.

Immutability
Recursion:
	func calls itself again and again.
	
Higher-order function:
	if either of the following criteria is satisfied:
		func takes another func as a param (or takes one or more func as a argument)
		or returns a func
		or both
	
	First class variables (to which functions are assigned):
		can be passed to funcs as arguments.
		They can also be returned from funcs.
		We can also store them in data structures.

Scala is a statically typed language:
	var name = "John"
	var age = 50
	It has a defined set of types.
	Determines the type during compile time.
	Scala supports "type inference".
	Other statically typed languages: C, Pascal, Rust. You have to specify the type of the variable.

Modes:
1. Interactive mode: scala shell and run one command at a time.
2. Scipt mode: You create .scala files and write all your code and then compile and run the code.

scalac First.scala
scala First

"scalac" is the compiler. It compiles the .scala source code and converts it into Java Byte code in a .class file.
"scala" is the executer / runner. It will execute the .class file.

It runs on the JVM - Java Virtual Machine.

sbt ===> Scala Build Tool.

How to use sbt:
1. Create a folder.   				mkdir FirstSbt
2. Navigate to the new folder.   	cd FirstSbt
3. Create a new project.			sbt new scala/scala-seed.g8
4. sbt will ask for a project name. Give a name (do not provide spaces in the project name).
5. sbt will create a folder for the project name.
6. Navigate to the project folder.	cd <project name>
7. run sbt
This opens the sbt command prompt and shows sbt:projectname>

sbt commands:
compile
run

In VS Code:
- open the project folder
- VSC will auto run sbt (a sit finds the build.sbt in the project folder)
- And gives the sbt prompt in the Terminal Window of VSC.

For better experience in VSC, install the following extensions:
- Metals by ScalaMeta
- Scala (sbt) by Lightbend
- Scala Syntax (official) by scala-lang

Scala Characteristics:
======================
Scala supports REPL (Read-Eval-Print-Loop) on the scala shell, but Scala is NOT an interpreted language. It is a compiled language.
Scala is case-sensitive.
All data types in Scala are defined as classes with methods that operate on the data.

Basic data types in Scala:
Boolean
Char
Int
Long
Float
Double
String

Advanced data types:
Unit:		no value (similar to void).
Null:		null / empty reference.
Nothing:	no value
Any:		Suptertype of all other types (all other types are of type Any).
AnyRef:		Supertype of all reference types.

A Scala program is a collection of objects that communicate with each other via each other's methods.
Scala has:
- Class: a template / blueprint that describes the behavior / states of the class.
- Object: a runtime instance of a class. They have states and behaviors.
- Methods: it is a behavior.
- Fields: Each object has unique set of instance variables (properties) called "fields". They hold / identify the state of the object.
- Traits: like abstract classes or interfaces. Encapsulate method and field definitions. They only have the signature of the methods. Implementaiton of menthods is not mandatory.
	Abstract classes:
	- classes that have abstract methods.
	- you can inherit but you cannot instantiate (cannot create objects).

Scala Identifiers:
- must start with an alphabet (a-z, A-Z) or an underscore.
- can contain alphanumeric characters (a-z, A-Z, 0-9) and underscore.
- illegal characters: $, !, -, #

Legal indentifiers:
age, salary, __age__, _salary_1, __1_salary
Illegal indentifiers:
$salary, 123age, -city

Scala keywords:
abstract	case	catch	class	def 	do	else	extends	false	final	finally	for	if	import	lazy	match	new	Null
object	override	package	private	protected	returned	sealed	this	throw	trait	Try	true	val 	var 	while
with	yield

Variable declarations:
var name = "John"	// mutable.
val name = "John"	// immutable.

var name: String = "John"
val age:Int = 25

val (name, age) = ("John", 45)
val salary = 123.45f		// Float.
val salary = 123.45			// Double.

Variable Scope:
---------------
Fields: variables that belong to an object. They are not defined in any function/method. Are accessible from inside eveyr method in the object. Can be mutable or immutable.
Method parameters: variables that are used to pass values to a function/method. Are always immutable, so must be defined with val.
Local variables: are declared inside a method. They are only accessible within the method where it is defined. Can be mutable or immutable.

27-Jul-2022:
============
Ex:
- Create a class Person with some very basic attributes: firstname, lastname, city. Methods: to print full name.
- Create a class Employee that inherits from Person and adds attributes: DateOfJoining, Salary. Methods: to print the name, DOJ and salary of the the employee.
- create a list of employees with some values
	1) print the details of each employee.
	2) print those employees that are from "Boston"
NO DATABASE!!!

Expressions, Statements and Conditionals:
-----------------------------------------
Expression: is a single unit of code that returns a value.
val x = 10 + 2
var x = 10 + 2
"hello"
"hel" + "l" + "o"

Expression Blocks: when you have multiple statements either on a single line separated by semi-colon or within a block of {}.
val x = 5; val y = 20
val amount = { val x = 5 * 20; x + 10 }

Statements: is an expression that does not return a value.
val x = 1

Conditionals: if-else block
if Syntax:
if(<condition>) <expression>
	- <condition> returns a true or false.
	- if the condition return true, <expression> is executed.

if(10 % 2 == 0) println("This is an even number")
if(10 % 2 == 0) {
	println("This is an even number")
}

x = 10
val y = (if(x == 10) "Value is 10")

if-else Syntax:
if(<cond>) {
	<expression>
}
else {
	<expression>
}

val max = if(x > y) x else y

if-else-if Syntax:
if(cond1) {
	<expression>
} else if(cond2) {
	<expression>
} else if(cond3) {
	<expression>
} else {
	<expression>
}

val status = "Pending"
 if(status == "Active") {
     |    println("Status is 'Active'")
     | } else if(status == "New") {
     |    println("Status is 'New'")
     | } else if(status == "Pending") {
     |    println("Status is 'Pending'")
     | } else {
     |    println("Status is unknown!")
     | }
	 
switch-case-default statement: In Scala, we have "Match Expressions":
Syntax:
<expression> match {
	case <pattern match1> => <expression>
	case <pattern match2 > => <expression>
}

val status = "Pending"
status match {
	case "Active" => { 
		println("Status of the Document is Active")
	}
	case "New" => {
		println("Status of the Document is New")
	}
	case "Pending" => {
		println("Status of the Document is Pending")
	}
	case _ => println("Status is invalid!!!")		// Like Using a wildcard.
}

If there is no match found, Scala will give an error.

You can also check for multiple values together:
val dow = "THU"
val whatDayIsIt = dow match {
	case "MON" => "weekday"
	case "TUE" => "weekday"
	case "WED" => "weekday"
	case "THU" => "weekday"
	case "FRI" => "weekday"
	case "SAT" => "weekend"
	case "SUN" => "weekend"
	case _ => "What?"
}

Alternatively:
val whatDayIsIt = dow match {
	case "MON" | "TUE" | "WED"| "THU" | "FRI" => "weekday"
	case "SAT" | "SUN" => "weekend"
	case _ => "What?"
}

Using Pattern Guards:
val response:String = null
response match {
	case r if r != null => println(s"Response received was $r")
	case r => println("No response received!")
}

Another example:
scala> val age = 10
val age: Int = 10

scala> age match {
     |    case a if a >= 18 => println("Can vote")
     |    case a => println("cannot vote")
     | }
	 
for loop:
=========
syntax:
for (<identifier> <- <iterator>) <expression>
for(x <- 1 to 7) print(s"$x ")

Iterator Guards:
for(i <- 1 to 10 if i % 2 == 0) print(s"$i ")

Nested iterators:
scala> for { x <- 1 to 2
     |    y <- 1 to 3 }
     |    { print(s"($x,$y)") }
	 
until:
for(i <- 1 to 10) print(s"$i ")			// from 1 to 10, including 1 and 10.
for(i <- 1 until 10) print(s"$i ")		// from 1 to 10, but not including 10.

step:
for(i <- 1 to 10 by 2) print(s"$i ")
for(i <- 1 until 10 by 2) print(s"$i ")

while loop:
===========
syntax:
while(condition) <expression>

var x = 0
while(x <= 10) {
	print(s"$x ")
	x = x + 1
}

var x = 0
while(x <= 10) {
	print(s"$x ")
	x = x + 1
	if(x > 5)
		break
}

Scala break statement:
To break out of loops, you have to create "breakable" loops.

import scala.util.control._
var x = 0
val loop = new Breaks

loop.breakable {
	while(x <= 10) {
		print(s"$x ")
		x = x + 1
		if(x > 5)
			loop.break()
	}
}

import scala.util.control._
var nums = List(1,2,3,4,5,6,7,8,9,10)
val loop = new Breaks

loop.breakable{
	for(x <- nums) {
		print(s"$x ")
		if(x >= 5)
			loop.break()
	}
}

Alternatively:
import scala.util.control.Breaks._

var nums = List(1,2,3,4,5,6,7,8,9,10)

breakable {
	for(x <- nums) {
		print(s"$x ")
		if(x >= 5)
			break()
	}
}

Breaking out of Nested loops:

Ex:
Reverse a string
val message = "This is scala"
alacs si sihT


def rev(msg: String): String = 
	( for(i <- msg.length - 1 to 0 by -1) yield msg(i) ).mkString

rev("Ajay")
Round 1: i = 3  msg(i) === "y"   yield msg(i)     puts into a sequence (list) ('y')
Round 2: i = 2  msg(i) === "a"   yield msg(i)     puts into a sequence (list) ('y', 'a')
Round 3: i = 1  msg(i) === "j"   yield msg(i)     puts into a sequence (list) ('y','a', 'j')
Round 4: i = 0  msg(i) === "A"   yield msg(i)     puts into a sequence (list) ('y','a', 'j', 'A')

('y','a','j','A').mkString  converts it into  "yajA"

Traits:
=======
trait Person {
	def fullname()
}

Traits in Scala are like interfaces in other languages C++, Java, C#.
Traits have either partial implementation or no implementation.
Traits can have abstract and non-abstract methods.
A class that extends a trait must implement the methods defined in the trait.
If there are implemented methods in the trait, they can be overridden by the subclass by providing the "override" modifier.
Classes that do not implement any of the defined methods (with no default implementation in the trait), become Abstract classes and must be defined with the abstract keyword.
And Abstract class cannot be instantiated, i.e.; you cannot create an instance (object) of that class.

Any modern OO langauge does not support multiple inheritance, a class cannot inherit from more than one class at a time.
Which means, to achieve multiple inheritance, you have to use Traits (known as interfaces in other languages).

Access Modifiers:
-----------------
private: private member is only visible inside the class or object that contains the member definition.
public : (default) public member can be accessed from anywhere.
protected: protected member are only accessible from subclasses of the class in which the member has been defined or the class itself in which it has been defined.

final class: cannot be inherited. Can be instantiated.
sealed class: Can be instantiated. Can be inherited only by other classes in the same .scala file.

this: represents the current object on which you have performed the operation (called the method).

28-Jul-2022:
============
Tuple:
An ordered container of two or more values, all of which may be of different types.
You create a tuple by providing values in parentheses and the values separated by commas.
Tuples are immutable.
Index elements start with 1 and not 0.
Access elements using the ._n format:
For e.g.;
val names = ("John", "Mary", "Joe", "William", "Bob")

names._1	will print "John"
names._2	will print "Mary" and so on.

val nums = (1,2,3,4)
nums.productIterator.foreach { i => println(s"Value is $i") }

In Scala, when returning value from a function, you can omit the "return" keyword and directly specify the value to be returned.
For e.g.;
def add(x: Int, y: Int) {
	x + y		// "return" not required.
}

println(add(10,20))		will print 30.

Nested Functions:
-----------------
object NestedFn {
    def main(args: Array[String]): Unit = {
        println(max(10,5,20))		// prints 20.
        println(max(5,20,10))		// prints 20.
        println(max(110,25,15))		// prints 110.

        // println(max2(100,200))  // Error!
    }

    def max(x: Int, y: Int, z: Int): Int = {
        def max2(a: Int, b: Int) : Int = if (a > b) a else b

        max2(x, max2(y,z))
    }
}

Named Parameters:
-----------------
def create(fname: String, lname:String, age: Int) {
	println(s"Name: $lname, $fname is $age years old")
}

create("John", "Smith", 24)
create(fname="John", lname="Smith", age=24)
create(lname="Smith", age=24, fname="John")
create(age=24, lname="Smith", fname="John")

Default value parameters:
-------------------------
def create(fname: String, lname:String, age: Int, prefix: String = "Mr."): Unit = {
	println(s"$prefix Name: $lname, $fname is $age years old")
}

create("John", "Smith", 24, "Miss")
create("John", "Smith", 24)
create(lname="John", fname="Smith", age=24)

Anonymous Functions (Lambda):
-----------------------------
val doubler = (x:Int) => x * 2
doubler(10)

val multiplier = (x: Int, y: Int) => x * y
multiplier(10,2)

Exception Handling in Scala:
============================
Use the try-catch block.
Syntax:
try {
	// code goes here
}
catch {
	case ex1: IOException => {
		// handle the exception here.
	}
	case ex2: ArithmeticException => {
		// handle the exception here.
	}
	case ex3: Throwable => {
		println("Something went wrong!")
	}
}
finally {
	// cleanup. This code will always execute.
}

Set:
====
A Set is an immutable, unordered collection of unique elements.
A set cannot have duplicate values.

val nums = Set(10,20,30,30,20,40,50)

Since sets are unordered, elements cannot be accessed using indexes.
val games = Set("Baseball", "Football", "Hockey")
games.head		returns the first element.
games.tail		returns all elements except the first one.
games.last		returns the last element.
games.isEmpty	returns true the set is empty, else false.

Merge sets:
val games1 = Set("Baseball", "Football", "Hockey")
val games2 = Set("Soccer", "Golf", "Baseball")
val mergedGames = games1 ++ games2

Merging removes duplicates.
games1.contains("Golf")
games2.contains("Soccer")

Add / remove elements in a set:
var games1 = Set("Baseball", "Football", "Hockey")
games1 += "Racing"
games1 -= "Football"

Iterate a Set:
for(game <- mergedGames) {
	println(game)
}

OR

mergedGames.foreach( (elem:String) => println(elem) )

Set operations:
UNION and INTERSECT

val games1 = Set("Baseball", "Football", "Hockey")
val games2 = Set("Soccer", "Golf", "Baseball")

val gamesIntersect = games1.intersect(games2)
val gamesUnion = games1.union(games2)

SortedSet:
import scala.collection.immutable.SortedSet
val numbers = SortedSet(5,8,1,9,2,7,4)

Seq:
====
Seq a trait that represents indexes sequence of elements that are immutable.
You can access elements using their indexes. It maintains the insertion order of elements. Indexes are zero-based.
It is ordered.

val nums: Seq[Int] = Seq(52,85,1,3,2,7)
nums(0)		52
nums(5)		7

Iterate over a Seq:
nums.foreach( (elem) => println(elem) )
nums.isEmpty
nums.contains(5)
nums.contains(85)
nums.endsWith( Seq(2,7) )
nums.endsWith( Seq(7) )
nums.lastIndexOf(2)
nums.indexOf(2)
nums.reverse

List:
=====
Immutable, ordered collection of items.
Elements can be accessed using their index position. Indexes are zero-based.

val nums = List(32,95,62,76,10)
val colors = List("red", "green", "blue", "yellow")

colors(0)		red
colors(2)		blue
colors.size		no. of elements
colors.head
colors.tail
colors.last
colors.isEmpty

for( clr <- colors) println(clr)
colors.foreach( (clr) => println(clr) )

scala> colors.map( (clr: String) => clr.size )
val res55: List[Int] = List(3, 5, 4, 6)

val nums = List(3,5,2,1)
val total = nums.reduce( (a, b) => a + b )
Steps:
a = 3, b = 5	returns 8
a = 8, b = 2	returns 10
a = 10, b= 1	returns 11

map(): takes function that converts a single element into another value.
reduce(): takes a function that combines two elements into a single element.

Prepending values to a list:
val names = List("John", "Mary")
scala> val new_names = "Joe" :: names
val new_names: List[String] = List(Joe, John, Mary)

This will not work:
val new_names = names :: "Joe"

Appending values to a list: Use ListBuffer
import scala.collection.mutable.ListBuffer

var names = ListBuffer[String]()
names += "John"
names += "Mary"
"William" +=: names		// prepend.
names.append("Bob")		// append.
names.remove(0)			// returns the element value.
names.remove(1,3)		// removes elements from 1 to 3, inclusive of both. Does not return anything.


List operations
val list3 = list1 ++ list2		// returns merge lists.
val sorted_list = list1.sorted	// returns a sorted list.
val rev_list = list2.reverse	// returns a reversed list.
val result = list2.drop(n)		// deletes the first "n" elements and returns those values. Original list is not changed.

Map:
====
Immutable Key-value store, a.k.a. dictionary, hashmap.
Items are stored in K-V pairs and the Keys have to unique.
You retrieve values using their respective keys.

val colorMap = Map("red" -> 0xFF0000, "green" -> 0xFF00, "blue" -> 0xFF)
colorMap("red")
colorMap("blue")
val cyan = colorMap("green") | colorMap("blue")

colorMap.contains("white")		// false.
colorMap.contains("blue")		// true.

// Append a new KV pair.
val color2 = Map("yellow" -> 0xFF0001)
val newColors = colorMap + color2		// Error!

// use this instead.
val newColors = colorMap + ("yellow" -> 0x0FF001)		// retrurns a new combined map.

// Remov element:
scala> val removedElem = newColors - ("red")	// returns a new map with all elems except "red".
val removedElem: scala.collection.immutable.Map[String,Int] = Map(green -> 65280, blue -> 255, yellow -> 1044481)

scala> removedElem
val res7: scala.collection.immutable.Map[String,Int] = Map(green -> 65280, blue -> 255, yellow -> 1044481)

List arithmetic:
List(1,2) == List(1,2)
List(3,4,5,3,2,7).distinct				// return distinct values from the list.
List('x','y','z','a','b') drop 2		// drop the first 2 elements and return new list.
List(10,23,8,9,65) filter(_ > 18)		// returns those elems that are > 18.
List(10,23,8,9,65).filter(_ > 18)		// returns those elems that are > 18.
List(10,23,8,9,65).filter((i) => i > 18)

//Flatten lists: Converts a list of lists into single list of elements.
scala> val x = List( List(1,2), List(3,4) )
val x: List[List[Int]] = List(List(1, 2), List(3, 4))

scala> x
val res17: List[List[Int]] = List(List(1, 2), List(3, 4))

scala> x.flatten
val res18: List[Int] = List(1, 2, 3, 4)

scala> List("John", "Mary").flatten
val res19: List[Char] = List(J, o, h, n, M, a, r, y)

List(1,2,3,4,5).reverse					// returns the reversed list.

Slicing: slice(n,m)   return elements from "n" upto "m", but not including "m".
scala> val x  = List(1,2,3,4,5)
val x: List[Int] = List(1, 2, 3, 4, 5)

scala> x.slice(1,3)
val res22: List[Int] = List(2, 3)

List(10,6,1,9,4,8,5).sorted				// returns a sorted list.

scala> val fruits = List("strawberries", "apples", "bananas", "kiwi", "peach")
val fruits: List[String] = List(strwaberries, apples, bananas, kiwi, peach)

scala> fruits.sortBy(_.size)
val res28: List[String] = List(kiwi, peach, apples, bananas, strawberries)

splitAt: split the list into 2 lists at the position specified.
scala> List(2,3,5,7) splitAt 2
val res29: (List[Int], List[Int]) = (List(2, 3),List(5, 7))

scala> List(2,3,5,7,9,4,10) splitAt 2
val res30: (List[Int], List[Int]) = (List(2, 3),List(5, 7, 9, 4, 10))

scala> List(2,3,5,7,9,4,10) splitAt 3
val res31: (List[Int], List[Int]) = (List(2, 3, 5),List(7, 9, 4, 10))

scala> List(2,3,5,7,9,4,10) take 4			// return the first 4 elements.
val res32: List[Int] = List(2, 3, 5, 7)

scala> List("apples,bananas,strawberries,kiwi") flatMap(_.split(","))
val res34: List[String] = List(apples, bananas, strawberries, kiwi)

val data = List(
	"apples,bananas,strawberries,kiwi",
	"john,mary,william,joe"
)

.flatMap(<func>)		// flattens the list and performs the function "func" on each element.
.map(<func>)			// does not flatten the list, performs the given "func" function each element.

For e.g.;
scala> val names = Seq("JOHN", "MARY")
val names: Seq[String] = List(JOHN, MARY)

scala> names.flatMap(_.toLowerCase)
val res39: Seq[Char] = List(j, o, h, n, m, a, r, y)

scala> names.flatten
val res40: Seq[Char] = List(J, O, H, N, M, A, R, Y)

scala> names
val res41: Seq[String] = List(JOHN, MARY)

scala> names.map(_.toLowerCase)
val res42: Seq[String] = List(john, mary)

File I/O:
=========

Case Classes:
=============
case class Book(title: String)

val book1 = Book("Scala Programming")
book1.title

case class Message(sender: String, recipient: String, body: String)
val msg1 = Message("ajay.singala@revature.com", "john.smith@abc.com", "Invitation for weekend party")
println(msg1.sender)
println(msg1.recipient)
println(msg1.body)

// Compare case class objects.
val msg2 = Message("ajay.singala@revature.com", "john.smith@abc.com", "Invitation for weekend party")
val areSame = msg1 == msg2

// Copy.
val msg1 = Message("ajay.singala@revature.com", "john.smith@abc.com", "Invitation for weekend party")
val msg3 = msg1.copy(sender = "joe.willams@xyz.com", recipient="bob.woodard@some.com")

lazy val:
=========
For Lazy evaluation.
variable does not get evaluated on declaration.
Variable gets evaluated when it is first accessed in the code.

Regular Expressions:
====================
A Regular Expression is a string of characters that is used as a search pattern to find/search for matching values in another string.

^ 	Matches beginning of line.
$ 	Matches end of line.
.	Matches any single character, except the newline (\n)
[...]	Matches any single character in the brackets.
[^...]	Matches any single character not in the brackets.
a|b 	Matches either a or b.
[0-9]	Matches any digits 0 to 9
[a-z]	Matches any alphabets a-z
[A-Z]	Matches any alphabets A-Z
[a-zA-Z0-9] Matches a-z, A-Z or 0-9
[^aeiou]	Match any characters except vowels.
[^0-9]		not a digit.
\\d			a digit
\\d{3}		match exactly 3 digits
\\d{3,}		match 3 or more digits
\\d{3,5}	match 3, 4 or 5 digits
Sca?		match Sc or Sca: the "a" is optional in the search result.
Sca*		match sc plus 0 or more "a"s.
Sca+		match sc plus 1 or more "a"s.
\\w			match a single word character, i.e.; [a-zA-Z0-9_]
\\W			match a single non-word character, i.e.; [^a-zA-Z0-9_]
\\s			match a white space character, i.e.; [\t\n\r].
\\S 		match a non-white space character, i.e.; [^\t\n\r].

[Mm]atch	Match or match
cla[sS]sy	classy or claSsy

firstname.lastname@company.com
^[a-zA-Z]*\.[a-zA-Z]*@[a-zA-Z0-9\-]*\.\\w{2,4}$
a.b@c.com
john.smith

Exercises:
1) Exchange the first and last characters of a string and return the new string.
My name is Ajay		==> yy name is AjaM
scala> val msg = "This is Scala"
val msg: String = This is Scala

scala> val len = msg.length
val len: Int = 13

scala> msg
val res0: String = This is Scala

scala> len
val res1: Int = 13

scala> val newmsg = msg.charAt(len - 1) + msg.substring(1, len - 1) + msg.charAt(0)


2) Seq("A", "BB", "CCC", "DDDD", "EEEEE")
A - 1
BB - 2
CCC - 3
DDDD - 4
EEEEE - 5

3) Create a function that receives a string and a number.
the function remove the char at the given position and return the result string (without that char).
"Program", 3 should return "Proram"



